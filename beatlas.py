#!/usr/bin/env python
#-*- coding:utf-8 -*-
#Modified by D. Moser in 2014-11-23

""" BeAtlas specific variables and functions
"""

import pyhdust.phc as phc
import numpy as np
from glob import glob
import os

vrots = [[259.759,354.834,417.792,464.549,483.847],\
     [252.050,346.163,406.388,449.818,468.126],\
     [245.127,336.834,399.983,448.076,467.806],\
     [239.522,329.496,388.734,432.532,450.806],\
     [234.301,321.139,379.297,423.241,441.122],\
     [228.538,313.797,370.343,412.488,429.914],\
     [219.126,299.656,354.547,395.821,413.008],\
     [211.544,288.840,341.081,380.426,396.978],\
     [203.438,279.328,328.666,365.697,380.660],\
     [197.823,268.964,316.901,353.568,368.506],\
     [192.620,262.688,308.208,341.963,356.410],\
     [187.003,255.125,299.737,332.511,346.043]]

obs = [1.1,1.2,1.3,1.4,1.45]

ms = [14.6, 12.5, 10.8, 9.6, 8.6, 7.7, 6.4, 5.5, 4.8, 4.2, 3.8,3.4]

Ms = np.array([14.6, 12.5, 10.8, 9.6, 8.6, 7.7, 6.4, 5.5, 4.8, 4.2, 3.8, 3.4],\
dtype=str)

Tp11 = np.array([28905.8,26945.8,25085.2,23629.3,22296.1,20919.7,\
18739.3,17063.8,15587.7,14300.3,13329.9,12307.1])


def makeDiskGrid(modn, mvals, mhvals, hvals, rdvals, sig0vals, doFVDD, selsources,\
    alpha=.5,mu=.5, R0r=300):
    """
    ###CONFIG. OPTIONS
    #MODEL NUMBER
    modn        = '02'
    #The following filter will be applied to the SOURCE selection (string fmt)
    selsources = '*'
                                 
    #SUPERFICIAL DENSITY PROFILE EXPONENT
    mvals       = [1.5,2.0,2.5,3.0]
    #VERTICAL DENSITY PROFILE EXPONENT     
    mhvals      = [1.5]
    #FRACTION OF TEFF OF PRIMARY STAR
    #This parameter sets if it you be FIXED to OB=1.1 case
    hvals       = [72.]
    #DISK RADIUS EQUATORIAL...    
    rdvals      = [30.]
    #SIGMA_0 VALUES
    sig0vals    = np.logspace(np.log10(0.02),np.log10(4.0),7)
    
    #Do the Full VDD model for the corresponding sig0?
    doFVDD = True 
    alpha = 0.5
    mu = 0.5
    #WARNING: it only generates a single R0 value per batch. If you want to change 
    # it, run it twice (or more)
    R0r = 300
    ###END CONFIG.
    """
    G = phc.G.cgs
    Msun = phc.Msun.cgs
    Rsun = phc.Rsun.cgs
    kB = phc.kB.cgs
    mH = phc.mH.cgs
    yr = phc.yr.cgs
    
    def readscr(file):
        '''
        Read source generated by make_source_grid.py and return M and Req in solar 
        units (ob must be present in the filename)
        '''
        f0 = open(file)
        lines = f0.readlines()
        f0.close()
        
        M = float(lines[3].split()[2])
        Rp = float(lines[4].split()[2])
        ob = float(file.split('ob')[1].split('_H')[0])
        Req = Rp*ob
        
        return M,Req,ob
            
    def doPL(prodI):
        '''
        Given a prodI (i.e., src,sig0,rd,h,m,mh), generates the Power-Law model 
        input
        '''
        src,sig0,rd,h,m,mh = prodI
        M,Req,ob = readscr(src)
        Mstr = str(M)
        M *= Msun
        Req *= Rsun
        
        M0,Req0,ob0 = readscr(src.replace('ob{0:.2f}'.format(ob),'ob1.10'))
        Req0 *= Rsun
        
        Tp = Tps[Mstr]    
        a0 = (kB*h/100.*Tp/mu/mH)**.5
        a = a0*Req0*Req**.25/Req/Req0**.25
        
        n0 = (G*M/2./np.pi)**.5*sig0/mu/mH/a/Req**1.5
        Th = a**2*mu*mH/kB
        
        srcname = src.replace('source/','').replace('.txt','')
        suffix = '_PLn{0:.1f}_sig{1:.2f}_h{2:03.0f}_Rd{3:05.1f}_{4}'.format(\
        (m+mh),sig0,h,rd,srcname)
        
        wmod = mod[:]
        wmod[13]=wmod[13].replace('18.6',('%.2f' % rd))
        wmod[20]=wmod[20].replace('2.0',('%.2f' % m))
        wmod[33]=wmod[33].replace('1.5',('%.2f' % mh))
        wmod[40]=wmod[40].replace('18000.',('%.1f' % Th))      
        wmod[52]=wmod[52].replace('2.35E13',('%.2e' % n0))      
              
        f0=open('mod'+modn+'/mod'+modn+suffix+'.txt', 'w')
        f0.writelines(wmod)
        f0.close()
        return
    
    def doMdot(prodI):
        '''
        Given a prodI (i.e., src,sig0,rd,h,m,mh), generates the full VDD model 
        input
        '''
        src,sig0,rd,h,m,mh = prodI
        M,Req,ob = readscr(src)
        Mstr = str(M)
        M *= Msun
        Req *= Rsun
        
        M0,Req0,ob0 = readscr(src.replace('ob{0:.2f}'.format(ob),'ob1.10'))
        Req0 *= Rsun
        
        Tp = Tps[Mstr]    
        a0 = (kB*h/100*Tp/mu/mH)**.5
        a = a0*Req0*Req**.25/Req/Req**.25
        
        R0 = R0r*Req
        Mdot = sig0*Req**2*3*np.pi*alpha*a**2/(G*M*R0)**.5   #SI units
        Mdot = Mdot/Msun*yr
        Th = a**2*mu*mH/kB
        
        srcname = src.replace('source/','').replace('.txt','')
        #suffix = '_NI_Mdot{:.1e}_Rd{:.1f}_R0{:.1f}_alp{:.1f}_h{:.1f}_{}'.\
        #format(Mdot,rd,R0/Req,alpha,h,srcname)
        suffix = '_NIa{0:.1f}_sig{1:.2f}_h{2:03.0f}_Rd{3:05.1f}_{4}'.format(\
        alpha,sig0,h,rd,srcname)
    
        wmod = mod[:]
        wmod[13]=wmod[13].replace('18.6',('%.2f' % rd))
        wmod[18]=wmod[18].replace('1',('%d' % 2))
        wmod[23]=wmod[23].replace('1.',('%.2f' % alpha)) 
        wmod[24]=wmod[24].replace('= 0.',('= %.2f' % (R0/Req)))
        wmod[25]=wmod[25].replace('= 0',('= %d' % 1))
        wmod[31]=wmod[31].replace('0',('%d' % 1))  
        wmod[40]=wmod[40].replace('18000.','{0:.1f}'.format(Th)) 
        wmod[49]=wmod[49].replace('2',('%d' % 3))            
        wmod[55]=wmod[55].replace('1.E-9',('%.2e' % Mdot))
          
        f0=open('mod'+modn+'/mod'+modn+suffix+'.txt', 'w')
        f0.writelines(wmod)
        f0.close()
        return
        
    
    ###SETUP Tpole = REF of a (scale height)    
    Tps = dict(zip(Ms, Tp11))
    
    ###PROGRAM BEGINS
    #Check modN folder
    if os.path.exists('mod{0}'.format(modn)) == False:
        os.system('mkdir mod{0}'.format(modn))
    
    #Select sources
    sources = glob('source/'+selsources)
    
    #Load disk model
    f0 = open('tables/'+'REF_disco.txt')
    mod = f0.readlines()
    f0.close()
    
    for prodI in product(sources,sig0vals,rdvals,hvals,mvals,mhvals):
        doPL(prodI)
        if doFVDD:
            doMdot(prodI)
    print('# {0:.0f} arquivos foram gerados !!'.format(len(sources)*\
    len(sig0vals)*len(rdvals)*len(hvals)*(len(mvals)+1)*len(mhvals)))    
    ###END PROGRAM    
    return

def makeSimulDens(dbase, basesim):
    """
    dbase = np.logspace(np.log10(0.02),np.log10(4.0),7)
    basesim = 'simulation/sed.txt'
    """
    f0 = open(basesim)
    mod = f0.readlines()
    f0.close()
    
    #fact = 2.  Tempo execucao = d/1e13*fact
    #Nf0 = 500000000
    for d in dbase:
        srcid = 'sig{0:.2f}'.format(d)
        #alpha = .39794
        #beta =  13.87219
        alpha = 0.34588
        beta =  8.50927
        newd = int(10**(-alpha*np.log10(d)+beta))
        print('{}, N_f = {:.2f}e+9'.format(srcid, newd/1e9))
        nmod = mod[:]
        nmod[9]=nmod[9].replace('500000000','{}'.format(newd))
        f0 = open(basesim.replace('.txt','_{}.txt'.format(srcid)),'w')
        f0.writelines(nmod)
        f0.close()
    #a = raw_input('asdads')
    return 
